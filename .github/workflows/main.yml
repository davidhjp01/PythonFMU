name: CI

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'

jobs:
  build-wrapper:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ 'ubuntu-latest', 'windows-latest' ]
        python-version: [ '3.9', '3.10', '3.11', '3.12' ]

    steps:
      - uses: actions/checkout@v3

      - name: Setup Python 3.x
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: 'x64'

      - name: Compile wrapper on Windows
        if: startsWith(runner.os, 'Windows')
        run: |
          mkdir tmp-build
          cd tmp-build
          cmake $Env:github_workspace/pythonfmu/pythonfmu-export -DCMAKE_BUILD_TYPE=Release -A x64
          cmake --build . --config Release
          cd ..

      - name: Compile wrapper on Linux / macOS
        if: startsWith(runner.os, 'Linux') || startsWith(runner.os, 'macOS')
        run: |
          mkdir tmp-build
          cd tmp-build
          cmake $GITHUB_WORKSPACE/pythonfmu/pythonfmu-export -DCMAKE_BUILD_TYPE=Release
          cmake --build . --config Release
          cd ..

      - name: Archive wrapper library
        uses: actions/upload-artifact@v4
        with:
          name: lib-wrapper-${{ runner.os }}-${{ matrix.python-version }}
          path: pythonfmu/resources

  build-python:
    needs: build-wrapper
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ 'ubuntu-latest', 'windows-latest' ]
        python-version: [ '3.9', '3.10', '3.11', '3.12' ]
    steps:
      - uses: actions/checkout@v3

      - name: Setup Python 3.x
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: 'x64'

      - name: Download wrappers
        uses: actions/download-artifact@v4
        with:
          name: lib-wrapper-${{ runner.os }}-${{ matrix.python-version }}
          path: pythonfmu/resources
          merge-multiple: true
    
      - name: Build distribution artifacts
        run: |
          python -m pip install setuptools wheel
          python setup.py sdist bdist_wheel

      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-wheel-${{ runner.os }}-${{ matrix.python-version }}
          path: dist

  test:
    needs: build-python
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ 'ubuntu-latest', 'windows-latest' ]
        python-version: [ '3.9', '3.10', '3.11', '3.12' ]
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v3

      - name: Setup Python 3.x
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: 'x64'

      - name: Download python package
        uses: actions/download-artifact@v4
        with:
          name: python-wheel-${{ runner.os }}-${{ matrix.python-version }}

      - name: Run the Tests
        run: |
          pip install -r requirements.txt
          cd python-wheel-${{ runner.os }}-${{ matrix.python-version }}
          pip install pythonfmu*.whl
          pytest --pyargs pythonfmu
          cd ..
        shell: bash -l {0}
